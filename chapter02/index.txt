Recipe 2.1. Splitting Strings on Any of Multiple Delimiters

    Problem: You need to split a string into fields, but the delimiters (and spacing around them) aren't consistent
        throughout the string.

    Solution: The split() method of string objects is really meant for very simple case, and does not allow for multiple
        delimiters or account for possible whitespace around the delimiters. In cases when you need a bit more
        flexibility, use the re.split() method.

Recipe 2.4. Matching and Searching for Text Patterns

    Problem: You want to match or search text for a specific pattern.

    Solution: If the text you're trying to match is a simple literal, you can often just use the
        basic string methods, such as str.find(), str.endswith(), str.startswith(), or similar.

Recipe 2.8. Writing a Regular Expression for Multiline Patterns

    Problem: You're trying to match a block of text using a regular expression, but you need the match to span multiple
        lines.

    Solution: This problem typically arises in patterns that use the dot (.) to match any character but forget to
        account for the fact that it doesn't match newlines. To fix the problem, you can add the support for newlines.

Recipe 2.9. Normalizing Unicode Text to a Standard Representation

    Problem: You're working with Unicode strings, but need to make sure that all of the strings have the same underlying
            representation.

    Solution: You can normalize the text into a standard representation using the unicodedata module

Recipe 2.10. Working with Unicode Characters in Regular Expressions

    Problem: You are using regular expressions to process text, but are concerned about handling of Unicode characters.

    Solution: By default, the re module is already programmed with rudimentary knowledge of certain Unicode character
        classes.

Recipe 2.11. Stripping Unwanted Characters from Strings

    Problem: You want to strip unwanted characters, such as whitespace, from the beginning, end, or middle of a text
        string.

    Solution: The strip() method can be used to strip characters from the beginning or end of a string. lstrip() and
        rstrip() perform stripping from the left or right side, respectively. By default, these methods strip whitespace,
        but other characters can be given.

Recipe 2.12. Sanitizing and Cleaning Up Text

    Problem: Some bored script kiddie has entered the text "pýtĥöñ" into a form on your web page and you'd like to clean
        it up somehow.

    Solution: The problem of sanitizing and cleaning up text applies to a wide variety of problems involving text
        parsing and data handling. At a very simple level, you might use basic string functions (e.g., str.upper() and
        str.lower()) to convert text to a standard case. Simple replacements using str.replace() or re.sub() can focus
        on removing or changing very specific character sequences. You can also normalize text using unicodedata.norma-
        lize(), as shown in Recipe 2.9.

        However, you might want to take the sanitation process a step further. Perhaps, for example, you want to elimi-
        nate whole ranges of characters or strip diacritical marks. To do so, you can turn to the overlooked str.trans-
        late() method.

Recipe 2.13. Aligning Text Strings

    Problem: You need to format text with some sort of alignment applied.

    Solution: For basic alignment of strings, the ljust(), rjust(), and center() methods of strings can be used.

Recipe 2.14. Combining and Concatenating Stings

    Problem: You want to combine many small strings together into a larger sting.

    Solution: If the strings you wish to combine are found in a sequence or iterable, the fastest way to combine them is
        to use the join() method.

Recipe 2.15. Interpolating Variables in Strings

    Problem: You want to create a string in which embedded variable names are substituted with a string representation
        of a variable's values.

    Solution: Python has no direct support for simply substituting variable values in strings. However, this feature can
        be approximated using the format() method of stings.

Recipe 2.16. Reformatting Text to a Fixed Number of Columns

    Problem: You have long strings that you want to reformat so that they fill a user-specified number of columns.

    Solution: Use the textwrap module to reformat text for output.

Recipe 2.17. Handling HTML and XML Entities in Text

    Problem: You want to replace HTML and XML entities such as &entity; or &#code; with their corresponding text. Alter-
        natively, you need to produce text, but escape certain characters (e.g., <, >, or &)

    Solution: If you are producing text, replacing special characters such as < or > is relatively easy if you use the
        html.escape() function.