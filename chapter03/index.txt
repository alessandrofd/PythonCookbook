Recipe 3.1. Rounding Numerical Values

    Problem: You want to round  a floating-point number to a fixed number of decimal places.

    Solution: For simple rounding, use the built-in round(value, ndigits) function.

Recipe 3.2. Performing Accurate Decimal Calculations

    Problem: You need to perform accurate calculations with decimal numbers, and don't want the small errors that
        naturally occur with floats.

    Solution: If you want more accuracy (and are willing to give up some performance) you can use the decimal module.

Recipe 3.3. Formatting Numbers for Output

    Problem: You need to format a number for output, controlling the number of digits, alignment, inclusion of thousands
        separator, and other details.

    Solution: To format a single number for output, use the built-in format() function.

Recipe 3.4. Working with Binary, Octal, and Hexadecimal Integers

    Problem: You need to convert output characters represented by binary, octal, or hexadecimal digits.

    Solution: To convert an integer into a binary, octal, or hexadecimal text string, use the bin(), oct(), or hex()
        functions, respectively.

Recipe 3.5. Packing and Unpacking Large Integers from Bytes

    Problem: You have a byte string and you need to unpack it into an integer value. Alternatively, you need to convert
        a large integer back into a byte string.

    Solution: To interpret the bytes as an integer, use int.from_bytes(), and specify the byte ordering. To convert a
        large integer value back into a byte string, use the int.to_bytes() method, specifyting the number of bytes and
        the byte order.

Recipe 3.6. Performing Complex-Value Math

    Problem: You code for interacting with the latest web authentication scheme has encountered a singularity and your
        only solution is to go around it in the complex plane. Or maybe you just need to perform some calculations
        using complex numbers.

    Solution: Complex number can be specified using the complex(real, imag) function or by floating-point numbers with a
        j suffix.

Recipe 3.7. Working with Infinity and NaNs

    Problem: You need to create or test for the floating-point values of infinity, negative infinity, or NaN (not a
        number).

    Solution: Python has no special syntax to represent these floating-point values, but they can be created using
        float().

Recipe 3.8. Calculating with Fractions

    Problem: You have entered a time machine and suddenly find yourself working on elementary-level homework problems
        involving fractions. Or perhaps you're writing code to make calculations involving measurements made in your
        wood shop.

    Solution: The fractions module can be used to perform mathematical calculations involving fractions.

Recipe 3.9. Calculating with Large Numerical Arrays

    Problem: You need to perform calculations on large numerical datasets, such as arrays or grids

    Solution: For any heavy computation involving arrays, use the NumPy library. The major feature of NumPy is that it
        gives Python an array object that is much more efficient and better suited for mathematical calculation than a
        standard Python list.

Recipe 3.10. Performing Matrix and Linear Algebra Calculations

     Problem: You need to perform matrix and linear algebra operations, such as matrix multiplication, finding
        determinants, solving linear equations, and so on.

     Solution: The NumPy library has a matrix object that can be used for this purpose.

Recipe 3.11. Picking Things at Random

     Problem: You want to pick random items out of a sequence or generate random numbers.

     Solution: The random module has various functions for random numbers and picking random items.

Recipe 3.12. Converting Days to Seconds, and Other Basic Time Conversions

     Problem: You have code that needs to perform simple time conversions, like days to seconds,
        hours to minutes, and so on.

     Solution: To perform conversions and arithmetic involving different units of time, use the
        datetime module.