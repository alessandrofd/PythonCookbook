Recipe 1.1. Unpacking a Sequence into Separate Values

    Problem: You have an N-element tuple or sequence that you would like to unpack into a collection of N variables.

    Solution: Any sequence (or iterable) can be unpacked into variables using a simples assignment operations. The only
        requirement is that the number of variables and structure match the sequence.

Recipe 1.2. Unpacking Elements form Iterables of Arbitrary Length

    Problem: You need to unpack N elements from a iterable, but the iterable may be longer than N elements, causing a
        "too many values to unpack" exception.

    Solution: Python "star expressions" can be used to address this problem.

Recipe 1.3. Keeping the Last N Items

    Problem: You want to keep a limited history of the last few items seen during iteration or during some other kind
        of processing.

    Solution: Keeping a limited history is a perfect example for a collections.deque.

Recipe 1.4. Finding the Largest or Smallest N Items

    Problem: You want to make a list of the largest or smallest N items in a collection

    Solution: The heapq module has two functions - nlargest() and nsmallest() - that do exactly what you want.

Recipe 1.5. Implementing a Priority Queue

    Problem: You want to implement a queue that sorts items by a given priority and always returns the item with the
        highest priority on each pop operation.

    Solution: Use the heapq module to implement a simple priority queue.

Recipe 1.6. Mapping Keys to Multiple Values in a Dictionary

    Problem: You want to make a dictionary that maps keys to more than one value (a so-called "multidict").

    Solution: A dictionary is a mapping where each key is mapped to a single value. If you want to map keys to multiple
        values, you need to store the multiple values in another container such as a list or set.

Recipe 1.7. Keeping Dictionaries in Order

    Problem: You want to create a dictionary, and you also want to control the order of items when
        iterating or serializing.

    Solution: To control the order of items in a dictionary, you can use an OrderedDict from the
        collections module. It exactly preserves the original insertion order of data when iterating.

Recipe 1.8. Calculating with Dictionaries

    Problem: You want to perform various calculations (e.g., minimum value, maximum value, sorting,
        etc.) on a dictionary of data.

Recipe 1.9. Finding Commonalities in Two Dictionaries

    Problem: You have two dictionaries and want to find out what they might have in common (same keys, same values, etc).

Recipe 1.10. Removing Duplicates from a Sequence while Maintaining Order

    Problem: You want to eliminate the duplicate values in a sequence, but preserve the order of the remaining items.

Recipe 1.11. Naming a Slice

    Problem: Your program has become as unreadable mess of hardcoded slice indices and you want to clean it up.

Recipe 1.12 Determining the Most Frequently Occurring Items in a Sequence

    Problem: You have a sequence of items, and you'd like to determine the most frequently occurring items in the
        sequence.

    Solution: The collections.Counter class is designed for just such a problem. It even comes with a handy most_common()
        method that will give you the answer.

Recipe 1.13. Sorting a List of Dictionaries by a Common Key

    Problem: You have a list of dictionaries and you would like to sort the entries according to one or more of the
        dictionary values.

    Solution: Sorting this type of structure is easy using the operator module's itemgetter function.

Recipe 1.14. Sorting Objects Without Native Comparison Support

    Problem: You want to sort objects of the same class, but they don't natively support comparison operations.

    Solution: The built-in sorted() function takes a argument that can be passed a callable that will return some value
        in the object that sorted will use to compare the objects.

Recipe 1.15. Grouping Records Together Based on a Field

    Problem: You have a sequence of dictionaries or instances and you want to iterate over the data in groups based on
        the value of a particular field, such as date.

    Solution: The itertools.groupby() function is particularly useful for grouping data together like this.

Recipe 1.16. Filtering Sequence Elements

    Problem: You have data inside of a sequence, and need to extract values or reduce the sequence using some criteria.

    Solution: The easiest way to filter sequence data is often to use a list comprehension.

Recipe 1.17. Extracting a Subset of a Dictionary

    Problem: You want to make a dictionary that is a subset of another dictionary.

    Solution: This is easily accomplished using dictionary comprehension.

Recipe 1.18. Mapping Names to Sequence Elements

    Problem: You have code that accesses list or tuple elements by position, but this makes the code somewhat difficult
        to read at times. You'd also like to be less dependent on position in the structure, by accessing the elements
        by name.

    Solution: collections.nametuple() provides these benefits, while adding minimal overhead over using a normal tuple
        object.

Recipe 1.19. Transforming and Reducing Data at the Same Time

    Problem: You need to execute a reduction function (e.g., sum(), min(), max()), but first need to transform and
        filter data.

    Solution: A very elegant way to combine a data reduction and a transformation is to use a generator-expression
        argument.

Recipe 1.20. Combining Multiple Mappings into a Single Mapping

     Problem: You have multiple dictionaries or mappings that you want to logically combine into a single mapping to
        perform certain operations, such as looking up values or checking for the existence of keys.

     Solution: An easy way to do this is to use the ChainMap class from the collections module.