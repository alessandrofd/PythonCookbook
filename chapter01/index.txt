Recipe 1.1. Unpacking a Sequence into Separate Values

    Problem: You have an N-element tuple or sequence that you would like to unpack into a collection of N variables.

    Solution: Any sequence (or iterable) can be unpacked into variables using a simples assignment operations. The only
        requirement is that the number of variables and structure match the sequence.

Recipe 1.2. Unpacking Elements form Iterables of Arbitrary Length

    Problem: You need to unpack N elements from a iterable, but the iterable may be longer than N elements, causing a
        "too many values to unpack" exception.

    Solution: Python "star expressions" can be used to address this problem.

Recipe 1.3. Keeping the Last N Items

    Problem: You want to keep a limited history of the last few items seen during iteration or during some other kind
        of processing.

    Solution: Keeping a limited history is a perfect example for a collections.deque.

Recipe 1.4. Finding the Largest or Smallest N Items

    Problem: You want to make a list of the largest or smallest N items in a collection

    Solution: The heapq module has two functions - nlargest() and nsmallest() - that do exactly what you want.

Recipe 1.5. Implementing a Priority Queue

    Problem: You want to implement a queue that sorts items by a given priority and always returns the item with the
        highest priority on each pop operation.

    Solution: Use the heapq module to implement a simple priority queue.

Recipe 1.6. Mapping Keys to Multiple Values in a Dictionary

    Problem: You want to make a dictionary that maps keys to more than one value (a so-called "multidict").

    Solution: A dictionary is a mapping where each key is mapped to a single value. If you want to map keys to multiple
        values, you need to store the multiple values in another container such as a list or set.

Recipe 1.7. Keeping Dictionaries in Order

    Problem: You want to create a dictionary, and you also want to control the order of items when
        iterating or serializing.

    Solution: To control the order of items in a dictionary, you can use an OrderedDict from the
        collections module. It exactly preserves the original insertion order of data when iterating.

Recipe 1.8. Calculating with Dictionaries

    Problem: You want to perform various calculations (e.g., minimum value, maximum value, sorting,
        etc.) on a dictionary of data.

Recipe 1.9. Finding Commonalities in Two Dictionaries

    Problem: You have two dictionaries and want to find out what they might have in common (same keys, same values, etc).

Recipe 1.10. Removing Duplicates from a Sequence while Maintaining Order

    Problem: You want to eliminate the duplicate values in a sequence, but preserve the order of the remaining items.

Recipe 1.11. Naming a Slice

    Problem: Your program has become as unreadable mess of hardcoded slice indices and you want to clean it up.