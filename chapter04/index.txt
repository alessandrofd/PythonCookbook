Recipe 4.1. Manually Consuming an Iterator

    Problem: You need to process items in an iterable, but for whatever reason, you can't or don't want to use a for
        loop.

    Solution: To manually consume an iterable, use the next() function and write your code to catch the StopIteration
        exception.

Recipe 4.2. Delegating Iteration

    Problem: You have built a custom container object that internally holds a list, tuple, or some other iterable. You
        would like to make iteration work with your new container.

    Solution: Typically, all you need to do is define a __iter__() method that delegates iteration to the internally
        held container.

Recipe 4.3. Creating New Iteration Patterns with Generators

    Problem: You want to implement a custom iteration pattern that's different than the usual built-in functions (e.g.,
        range(), reversed(), etc.).

    Solution: If you want to implement a new kind of iterations pattern, define it using a generator function.

Recipe 4.4. Implementing the Iterator Protocol

    Problem: You are building a custom object on which you would like to support iteration, but would like an easy way
        to implement the iterator protocol.

    Solution: By far, the easiest way to implement iteration on an object is to use a generator function.

Recipe 4.5. Iterating in Reverse

    Problem: You want to iterate in reverse over a sequence.

    Solution: Use the built-in reversed() function.

Recipe 4.6. Defining Generator Function with Extra State

    Problem: You would like to define a generator function, but it involves extra state that you would like to expose to
        the user somehow.

    Solution: If you want a generator to expose extra stat to the user, don't forget that you can easily implement it as
        a class, putting the generator function code in the __iter__() method.

